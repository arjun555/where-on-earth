{"version":3,"sources":["Earth.js","App.js","serviceWorker.js","index.js"],"names":["Earth","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createScene","rendererInit","renderSphere","camera","position","z","animate","addDot","axis","controls","autoRotate","autoRotateSpeed","enablePan","requestAnimationFrame","update","renderer","render","scene","addCircle","material","THREE","color","geometry","radius","Math","PI","vertices","shift","circle","rotation","x","add","points","sphereToCartesian","dotGeometry","push","y","dotMaterial","size","sizeAttenuation","dot","axesHelper","lat","lon","latRad","degToRad","lonRad","cos","sin","console","log","concat","texture","load","wireframe","map","sphere","window","innerWidth","innerHeight","OrbitControls","domElement","setSize","document","body","appendChild","degrees","react_default","a","createElement","React","Component","App","state","className","Earth_Earth","Boolean","location","hostname","match","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAIqBA,cAEjB,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAQJI,YAAc,WACVP,EAAKQ,eACLR,EAAKS,eACLT,EAAKU,OAAOC,SAASC,EAAI,EACzBZ,EAAKa,UACLb,EAAKc,SACLd,EAAKe,QAfIf,EAkBba,QAAU,WACNb,EAAKgB,SAASC,YAAa,EAC3BjB,EAAKgB,SAASE,iBAAmB,EACjClB,EAAKgB,SAASG,WAAY,EAC1BC,sBAAuBpB,EAAKa,SAE5Bb,EAAKgB,SAASK,SACdrB,EAAKsB,SAASC,OAAQvB,EAAKwB,MAAOxB,EAAKU,SAzB9BV,EA4BbyB,UAAY,WACR,IAAIC,EAAW,IAAIC,oBAAyB,CAAEC,MAAO,WACjDC,EAAW,IAAIF,iBAAsB3B,EAAK8B,OAAQ,IAAK,EAAG,IAAIC,KAAKC,IACvEH,EAASI,SAASC,QAClB,IAAIC,EAAS,IAAIR,OAAYE,EAAUH,GACvCS,EAAOC,SAASC,EAAIN,KAAKC,GAAG,EAC5BhC,EAAKwB,MAAMc,IAAKH,IAlCPnC,EAqCbc,OAAS,WACL,IAAIyB,EAASvC,EAAKwC,kBAAkBxC,EAAK8B,OAAQ,WAAY,OACzDW,EAAc,IAAId,WACtBc,EAAYR,SAASS,KAAK,IAAIf,UAAeY,EAAOF,EAAGE,EAAO3B,EAAG2B,EAAOI,IACxE,IAAIC,EAAc,IAAIjB,iBAAsB,CAAEkB,KAAM,GAAIC,iBAAiB,IACrEC,EAAM,IAAIpB,SAAcc,EAAaG,GACzC5C,EAAKwB,MAAMc,IAAKS,IA3CP/C,EA8Cbe,KAAO,WACH,IAAIiC,EAAa,IAAIrB,aAAkB,GACvC3B,EAAKwB,MAAMc,IAAKU,IAhDPhD,EAmDbwC,kBAAoB,SAACV,EAAQmB,EAAKC,GAE9B,IAAIC,EAASnD,EAAKoD,SAASH,GACvBI,EAASrD,EAAKoD,SAASF,GAGvBb,EAAIP,EAAOC,KAAKuB,IAAIH,GAAQpB,KAAKuB,IAAID,GACrCV,EAAIb,EAAOC,KAAKuB,IAAIH,GAAQpB,KAAKwB,IAAIF,GACrCzC,EAAIkB,EAAOC,KAAKwB,IAAIJ,GAGxB,OADAK,QAAQC,IAAR,MAAAC,OAAkBrB,EAAlB,SAAAqB,OAA2Bf,EAA3B,SAAAe,OAAoC9C,IAC7B,CAACyB,EAAGA,EAAGM,EAAGA,EAAG/B,EAAGA,IA9DdZ,EAiEbS,aAAe,WACX,IAAIoB,EAAW,IAAIF,iBAAsB3B,EAAK8B,OAAQ,IAAK,KACvD6B,GAAU,IAAIhC,iBAAsBiC,KAAK,0EACzClC,EAAW,IAAIC,oBAAwB,CAACkC,WAAW,EAAOC,IAAKH,IAC/DI,EAAS,IAAIpC,OAAYE,EAAUH,GACvC1B,EAAKwB,MAAMc,IAAKyB,IApEhB/D,EAAKwB,MAAQ,IAAIG,QACjB3B,EAAKU,OAAS,IAAIiB,oBAAyB,GAAIqC,OAAOC,WAAaD,OAAOE,YAAa,GAAK,KAC5FlE,EAAKsB,SAAW,IAAIK,gBACpB3B,EAAKgB,SAAW,IAAImD,EAAcnE,EAAKU,OAAQV,EAAKsB,SAAS8C,YAC7DpE,EAAK8B,OAAS,EANL9B,8EA0ETG,KAAKmB,SAAS+C,QAASL,OAAOC,WAAYD,OAAOE,aACjDI,SAASC,KAAKC,YAAarE,KAAKmB,SAAS8C,6CAGpCK,GACL,OAAOA,EAAU1C,KAAKC,GAAG,qCAIzB,OACA0C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,4BACCzE,KAAKI,sBAxFiBsE,IAAMC,WCc1BC,6MAbbC,MAAQ,2EAKN,OACEN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACM,EAAD,cATUL,IAAMC,WCSJK,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAAShE,OAAOmD,EAAAC,EAAAC,cAACY,EAAD,MAASlB,SAASmB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.07a331d4.chunk.js","sourcesContent":["import React from 'react';\nimport * as THREE from 'three';\nimport * as OrbitControls from 'three-orbitcontrols'\n\nexport default class Earth extends React.Component {\n\n    constructor(){\n        super()\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n        this.renderer = new THREE.WebGLRenderer();\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement)\n        this.radius = 2;\n    }\n\n    createScene = () => {\n        this.rendererInit();\n        this.renderSphere();\n        this.camera.position.z = 5;\n        this.animate();\n        this.addDot();\n        this.axis();\n    }\n\n    animate = () => {\n        this.controls.autoRotate = true;\n        this.controls.autoRotateSpeed = -1.0;\n        this.controls.enablePan = true;\n        requestAnimationFrame( this.animate );\n        \n        this.controls.update();\n        this.renderer.render( this.scene, this.camera );\n    }\n\n    addCircle = () => {\n        let material = new THREE.LineBasicMaterial( { color: 0xffff00} )\n        let geometry = new THREE.CircleGeometry( this.radius, 400, 0, 1.2*Math.PI)    \n        geometry.vertices.shift();\n        let circle = new THREE.Line( geometry, material );\n        circle.rotation.x = Math.PI/4;\n        this.scene.add( circle );\n    }\n\n    addDot = () => {\n        let points = this.sphereToCartesian(this.radius, 51.507222, -0.1275)\n        let dotGeometry = new THREE.Geometry();\n        dotGeometry.vertices.push(new THREE.Vector3( points.x, points.z, points.y));\n        let dotMaterial = new THREE.PointsMaterial( { size: 10, sizeAttenuation: false } );\n        let dot = new THREE.Points( dotGeometry, dotMaterial );\n        this.scene.add( dot );\n    }\n\n    axis = () => {\n        var axesHelper = new THREE.AxesHelper( 5 );\n        this.scene.add( axesHelper );\n    }\n\n    sphereToCartesian = (radius, lat, lon) => {\n        \n        let latRad = this.degToRad(lat);\n        let lonRad = this.degToRad(lon);\n\n\n        let x = radius*Math.cos(latRad)*Math.cos(lonRad)\n        let y = radius*Math.cos(latRad)*Math.sin(lonRad)\n        let z = radius*Math.sin(latRad)\n\n        console.log(`x: ${x}, y: ${y}, z: ${z}`)\n        return {x: x, y: y, z: z}\n    }\n\n    renderSphere = () => {\n        let geometry = new THREE.SphereGeometry( this.radius, 200, 200 );\n        let texture = new THREE.TextureLoader().load(\"https://s3-eu-west-2.amazonaws.com/bckld/lab/textures/earth_latlon.jpg\")\n        let material = new THREE.MeshBasicMaterial({wireframe: false, map: texture});\n        let sphere = new THREE.Mesh( geometry, material );\n        this.scene.add( sphere );\n    }\n\n    rendererInit(){\n        this.renderer.setSize( window.innerWidth, window.innerHeight );\n        document.body.appendChild( this.renderer.domElement );\n    }\n\n    degToRad(degrees){\n        return degrees * Math.PI/180;\n    }\n\n    render(){\n        return(\n        <div>\n            <h1>Where on Earth</h1>\n            {this.createScene()}\n        </div>\n        )\n    }\n\n\n}","import React from 'react';\nimport Earth from './Earth'\n\nclass App extends React.Component {\n\n  state = {\n\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Earth />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}